# ProductionQuantum.rb
# 
# Class was originally generated by rails 3.2.8 
# Modified by Dan Laffan (12111619) starting 5th November 2012.
#
# Copyright Â© 2012, Julian Arnold and Daniel M. Laffan.  All rights reserved.
# Rights in third party code acknowledged.

class ProductionQuotum < ActiveRecord::Base
  attr_accessible :start_date, :finish_date, :maximum_cakes_allowed
  
  validates_presence_of :start_date, :finish_date, :maximum_cakes_allowed
  validates_numericality_of :maximum_cakes_allowed
  validates_uniqueness_of :start_date

  has_many  :cakes
  
=begin
  has_many  :monday_bookings,
            :class_name => "Cake",
            :foreign_key => "production_quotum_id",
            :include => ["shopping_cart", ["shopping_cart","shopping_cart_status"]],
            :conditions => ["weekday = 1 and shopping_cart_statuses.paid_cart = ?", true]
=end

  
  def bookings
    accumulator = 0.0
    cakes.all.each do |cake|
      accumulator += cake.production_quota_value
    end # of cake
    return accumulator
  end
  
  def monday_bookings
    return bookings_for_a_weekday(1)
  end
  
  def tuesday_bookings
    return bookings_for_a_weekday(2)
  end

  def wednesday_bookings
    return bookings_for_a_weekday(3)
  end

  def thursday_bookings
    return bookings_for_a_weekday(4)
  end

  def friday_bookings
    return bookings_for_a_weekday(5)
  end

  def saturday_bookings
    return bookings_for_a_weekday(6)
  end

  def sunday_bookings
    return bookings_for_a_weekday(0)
  end

  def bookings_for_a_weekday(day_number)
    accumulator = 0.0
    cakes.all.each do |cake|
      if cake.weekday == day_number # 1 = Monday, 6 = Saturday, 0 = Sunday
        accumulator += cake.production_quota_value
      end
    end # of cake
    return accumulator
  end
  
  def self.auto_generate # creates new quotas automatically, 2 years ahead
    # auto-generates production quotas into the future
    
    now = Time.now.gmtime.to_date
    one_years_time = Time.now.gmtime.to_date + 2.years + 1.day
    
    if ProductionQuotum.count > 0
      latest_date = ProductionQuotum.last(order: "start_date").start_date + 7.days # next Monday
    else
      # .wday returns 0 for Sunday, 1 for Monday ... 6 for Saturday
      latest_date = now - (now.wday).days + 1.day # last Monday
    end
    
    latest_date = latest_date.to_date
    
    if latest_date < one_years_time
      # get the default production quota for the week
      default_value = GeneralSetting.first.default_value_for_weekly_production_quota
      
      tracking_date = latest_date
      while tracking_date < one_years_time
        ProductionQuotum.create({start_date: tracking_date, finish_date: (tracking_date + 6.days), maximum_cakes_allowed: default_value})
        tracking_date += 7
      end
    end
    
    return latest_date
  end
  
end
