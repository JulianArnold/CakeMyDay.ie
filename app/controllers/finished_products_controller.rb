# FinishedProductsController.rb
# 
# Class was originally generated by rails 3.2.8 
# Modified by Dan Laffan (12111619) starting 24th November 2012.
#
# Note 1:  This was based on a solution from Stack Overflow:
#          http://stackoverflow.com/questions/13481673/activerecord-find-by-number-of-associated-records
#          Accessed on 1-Dec-2012.
#
# Copyright Â© 2012, Julian Arnold and Daniel M. Laffan.  All rights reserved.
# Rights in third party code acknowledged.

class FinishedProductsController < ApplicationController

  before_filter :logged_in_required
  before_filter :manager_required
  before_filter :get_variables

  def index
    # GET /finished_products
    # GET /finished_products.json
    @finished_products = FinishedProduct.all(:include => "special_occasion", order: "special_occasions.running_order, finished_products.running_order")

    respond_to do |format|
      format.html # index.html.erb
      #format.json { render json: @finished_products }
    end
  end

  def show
    # GET /finished_products/1
    # GET /finished_products/1.json
    @finished_product = FinishedProduct.find(params[:id])

    respond_to do |format|
      format.html # show.html.erb
      #format.json { render json: @finished_product }
    end
  end

  def new
    # GET /finished_products/new
    # GET /finished_products/new.json
    @finished_product = FinishedProduct.new

    respond_to do |format|
      format.html # new.html.erb
      #format.json { render json: @finished_product }
    end
  end

  def edit
    # GET /finished_products/1/edit
    @finished_product = FinishedProduct.find(params[:id])
  end

  def create
    # POST /finished_products
    # POST /finished_products.json
    @finished_product = FinishedProduct.new(params[:finished_product])

    respond_to do |format|
      if @finished_product.save
        format.html { redirect_to @finished_product, notice: 'Finished product was successfully created.' }
        #format.json { render json: @finished_product, status: :created, location: @finished_product }
      else
        format.html { render action: "new" }
        #format.json { render json: @finished_product.errors, status: :unprocessable_entity }
      end
    end
  end

  def update
    # PUT /finished_products/1
    # PUT /finished_products/1.json
    @finished_product = FinishedProduct.find(params[:id])

    respond_to do |format|
      if @finished_product.update_attributes(params[:finished_product])
        format.html { redirect_to @finished_product, notice: 'Finished product was successfully updated.' }
        #format.json { head :no_content }
      else
        format.html { render action: "edit" }
        #format.json { render json: @finished_product.errors, status: :unprocessable_entity }
      end
    end
  end

  def destroy
    # DELETE /finished_products/1
    # DELETE /finished_products/1.json
    @finished_product = FinishedProduct.find(params[:id])
    @finished_product.destroy

    respond_to do |format|
      format.html { redirect_to finished_products_url }
      #format.json { head :no_content }
    end
  end

  def link_image
    #Parameters: {"finished_product_id"=>"", "image_id"=>"209", "commit"=>"Add"}
    @finished_product = FinishedProduct.find(params[:finished_product_id].to_i)
    image = Image.find(params[:image_id].to_i)
    if image and @finished_product
      last_fpi = FinishedProductImage.find(:first, :conditions => ["finished_product_id = ?", @finished_product.id], :order => "running_order DESC")
      fpi = FinishedProductImage.new
      fpi.image_id = image.id
      fpi.finished_product_id = @finished_product.id
      if last_fpi
        fpi.running_order = last_fpi.running_order + 100
      else
        fpi.running_order = 100
      end
      if fpi.save
        flash[:notice] = "Image has been successfully linked to this product"
      else
        flash[:notice] = "Image was NOT linked to this product - something went wrong."
      end
      redirect_to @finished_product
    end
  end

  private
  
  def get_variables
    @special_occasions = SpecialOccasion.all(order: "running_order")
    @unallocated_images = Image.all(:include => 'finished_product_images', :conditions => ["finished_product = ? and finished_product_images.id IS NULL", true]) # see Note 1 above.
  end
end
