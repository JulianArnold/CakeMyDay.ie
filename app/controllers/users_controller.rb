# UsersController.rb
# 
# Class was originally generated by rails 3.2.8 
# Modified by Dan Laffan (12111619) starting 5th November 2012.
#
# All methods originally based on AuthLogic demonstration code 
# @ https://github.com/binarylogic/authlogic_example
#
# and on demonstration code from 
# @ http://joelgreutman.com/2011/03/13/rails-3-and-authlogic-basic-setup
#
# and subsequently modified by Dan Laffan.
#
# Copyright Â© 2012, Julian Arnold and Daniel M. Laffan.  All rights reserved.
# Rights in third party code acknowledged.

class UsersController < ApplicationController

  before_filter :logged_out_required, :only => [:new, :create]
  before_filter :logged_in_required, :only => [:show, :edit, :update, :destroy]
  before_filter :admin_required, :only => [:index, :destroy]
  before_filter :get_variables
  
  def index
    # GET /users
    # GET /users.json
    @users = User.all(:include => "user_group", :order => "user_groups.is_a_manager, user_groups.is_an_admin, last_name, first_name")

    respond_to do |format|
      format.html # index.html.erb
      #format.json { render json: @users }
    end
  end

  def show
    # GET /users/1
    # GET /users/1.json
    if current_user and current_user.admin? == false
      @user = current_user
    else
      @user = User.find(params[:id])
    end

    respond_to do |format|
      format.html # show.html.erb
      #format.json { render json: @user }
    end
  end

  def new
    # GET /users/new
    # GET /users/new.json
    @user = User.new

    respond_to do |format|
      format.html # new.html.erb
      #format.json { render json: @user }
    end
  end

  def edit
    # GET /users/1/edit
    @user = User.find(params[:id])
  end

  def create
    # POST /users
    # POST /users.json
    @user = User.new(params[:user])
    @user.user_group_id = UserGroup.find(:first, :conditions => ["name = ? and is_a_manager = ? and is_an_admin = ?", "Customers", false, false]).id
    
    respond_to do |format|
      if @user.save
        format.html { redirect_to @user, notice: 'User was successfully created.' }
        #format.json { render json: @user, status: :created, location: @user }
      else
        format.html { render action: "new" }
        #format.json { render json: @user.errors, status: :unprocessable_entity }
      end
    end
  end

  def update
    # PUT /users/1
    # PUT /users/1.json
    if current_user and current_user.admin? == false
      @user = current_user
      params[:user_group][:user_group_id] = current_user.user_group_id
    else
      @user = User.find(params[:id])
    end

    respond_to do |format|
      if @user.update_attributes(params[:user])
        format.html { redirect_to @user, notice: 'User was successfully updated.' }
        #format.json { head :no_content }
      else
        format.html { render action: "edit" }
        #format.json { render json: @user.errors, status: :unprocessable_entity }
      end
    end
  end

  def destroy
    # DELETE /users/1
    # DELETE /users/1.json
    @user = User.find(params[:id])
    @user.destroy

    respond_to do |format|
      format.html { redirect_to users_url }
      #format.json { head :no_content }
    end
  end

  private
  
  def get_variables
    @user_groups = UserGroup.all(:order => "is_a_manager, is_an_admin")
  end
  
end