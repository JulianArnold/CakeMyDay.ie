# ApplicationController.rb
# 
# Class was originally generated by rails 3.2.8 
# Modified by Dan Laffan (12111619) starting 5th November 2012.
#
# Note 1 (see methods below)
#         Certain methods originally based on AuthLogic demonstration code 
#         @ https://github.com/binarylogic/authlogic_example
#
#         and on demonstration code from 
#         @ http://joelgreutman.com/2011/03/13/rails-3-and-authlogic-basic-setup
#
# Copyright Â© 2012, Julian Arnold and Daniel M. Laffan.  All rights reserved.
# Rights in third party code acknowledged.

class ApplicationController < ActionController::Base
  protect_from_forgery

  helper_method :current_user_session, :current_user, :manager_user, :admin_user
  helper_method :logged_in_required
  helper_method :logged_out_required
  helper_method :manager_required, :admin_required
  helper_method :tick_or_cross
  helper_method :current_cart
  
  before_filter :general_setting
  
  private

  # See note 1 above
  def current_user_session
    return @current_user_session if defined?(@current_user_session)
    @current_user_session = UserSession.find
  end

  # See note 1 above
  def current_user
    return @current_user if defined?(@current_user)
    @current_user = current_user_session && current_user_session.user
  end

  def admin_user
    if current_user and current_user.admin?
      return true
    else
      return false
    end
  end
  
  def manager_user
    if current_user and current_user.manager?
      return true
    else
      return false
    end
  end

  def customer_user
    if current_user and !current_user.admin? and !current_user.manager?
      return true
    else
      return false
    end
  end
  
  # See note 1 above
  def logged_in_required
    unless current_user
      store_location
      flash[:notice] = "You must be logged in to access this page"
      redirect_to login_url
      return false
    end
  end

  # See note 1 above
  def logged_out_required
    if current_user
      store_location
      flash[:notice] = "You must be logged out to access this page"
      redirect_to root_url
      return false
    end
  end
  
  def manager_required
    unless (current_user and current_user.user_group.is_a_manager == true)
      store_location
      flash[:notice] = "You are not authorised to access that page [01]"
      redirect_to root_url
      return false
    end
  end
  
  def admin_required
    unless (current_user and current_user.user_group.is_an_admin == true)
      store_location
      flash[:notice] = "You are not authorised to access that page [02]"
      redirect_to root_url
      return false
    end
  end
  
  # See note 1 above
  def store_location
    session[:return_to] = request.fullpath
  end

  # See note 1 above
  def redirect_back_or_default(default)
    # Original code
    # def redirect_back_or_default(default)
    #   redirect_to(session[:return_to] || default)
    #   session[:return_to] = nil
    # end
    
    if session[:return_to]
      destination = session[:return_to]
      session[:return_to] = nil
    else
      destination = default
      session[:return_to] = nil
    end
    redirect_to(destination)
  end

  # Miscellaneous stuff
  def tick_or_cross(some_boolean_value) # you need to use 'sanitize' before this.
    if some_boolean_value == true
      return "&#10003;" # a tick character
    else
      return "&#10005;" # an X character
    end
  end
  
  def current_cart
    cart = ShoppingCart.find(:first, :include => "shopping_cart_status", :conditions => ["session_id = ? and shopping_cart_statuses.active_cart = ?", session[:session_id], true])
    if !cart and current_user and current_user.customer
      return cart = current_user.customer.open_cart
    else
      return nil
    end
  end

  def general_setting
    @general_setting = GeneralSetting.first
  end
  
end
