# StaticPagesController.rb
# 
# Class was originally generated by rails 3.2.8 
# Modified by Dan Laffan (12111619) starting 23rd November 2012.
#
# Note 1: Search attribute based on code demonstrated by Wesley Gorman
#         in NCI lecture, and subsequently modified by Dan Laffan.
#
# Copyright Â© 2012, Julian Arnold and Daniel M. Laffan.  All rights reserved.
# Rights in third party code acknowledged.

class StoreController < ApplicationController

  before_filter :get_variables, :except => 'search'

  def index
    
    if @special_occasions
      @special_occasion = SpecialOccasion.first(conditions: ["name = ? and visible_to_customers = ?", params[:show], true])
    end
    
    if @special_occasion
      @finished_products = @special_occasion.finished_products.all(order: "running_order, created_at DESC")
    else # params[:show] == "latest" or !params[:show] or params[:show] not known
      @finished_products = FinishedProduct.all(order: "running_order, created_at DESC")
      @finished_product = nil
    end
  end

  def show
    @finished_product = FinishedProduct.find_by_product_name(params[:product_name].gsub("_"," "))
    if @finished_product
      # go to the usual show.html.erb
      @special_occasion = @finished_product.special_occasion
    else
      redirect_to root_url, :notice => "Sorry, we couldn't find that product."
    end
  end

  def search
    @finished_products = FinishedProduct.search(params[:search_query])
    @products = Product.search(params[:search_query])
    render :search_results
  end

  def design_my_cake # Gives users the HTML form to customise a new cake
    # get or create the current shopping cart
    @current_cart = current_cart
    if !@current_cart # If there is no cart in existence already...
      # create a new cart
      @current_cart = ShoppingCart.new
      if current_user and current_user.customer
        @current_cart.customer_id = current_user.customer.id
      end
      @current_cart.shopping_cart_status_id = ShoppingCartStatus.first(:conditions => ["active_cart = ?", true]).id
      @current_cart.pay_pal_status_id = 0
      @current_cart.save
      session[:shopping_cart_id] = @current_cart.id
    end
    
    # builds an empty @cake
    @cake = @current_cart.cakes.new
    @cake.cake_required_at = Time.now.gmtime.to_date + 2.weeks + 20.hours
    @cake.based_on_finished_product_id = FinishedProduct.first.id
    @product_categories = ProductCategory.all(order: "running_order")
  end

  # Parameters: {"product"=>{"0"=>{":id"=>"5008", ":choice"=>"Chocolate biscuit cake", ":description"=>""}, "1"=>{":id"=>"5083", ":choice"=>"Vanilla buttercream"}, "2"=>{":id"=>"5084", ":description"=>"Covering nice!"}, "3"=>{":id"=>"5085", ":description"=>"", ":quantity"=>"1", ":choice"=>"Rose"}, "4"=>{":id"=>"5091"}, "5"=>{":quantity"=>"1", ":description"=>"sdf", ":id"=>"5092"}, "6"=>{":quantity"=>"2", ":description"=>"asdf", ":id"=>"5093"}, "7"=>{":description"=>"asdf", ":id"=>"5094"}, "8"=>{":description"=>"asdf", ":id"=>"5095"}, "9"=>{":quantity"=>"3", ":description"=>"asdf", ":id"=>"5096"}, "10"=>{":quantity"=>"4", ":description"=>"asdf", ":id"=>"5097"}, "11"=>{":description"=>"asdf", ":id"=>"5098"}, "12"=>{":quantity"=>"5", ":description"=>"asdf", ":id"=>"5099"}, "13"=>{":description"=>"asdf"}}, "category_288"=>"White", "commit"=>"Add to Cart", "method"=>:post}
  def add_this_to_the_cart
    cart = current_cart # By the time Ruby gets here, we have a cart.

    # First thing is to build the cake
    # ================================
    # Cake is the intermediate level object between a shopping_cart and a collection of
    # individual shopping_cart_items
    #
    # cake => {"based_on_finished_product_id"=>"371", "cake_required_at(3i)"=>"1", "cake_required_at(2i)"=>"1", "cake_required_at(1i)"=>"2013",
    #          "cake_required_at(4i)"=>"20", "cake_required_at(5i)"=>"00", "special_occasion"=>"Birthday", 
    #          "name_to_appear_on_cake"=>"Happy birthday Billy", "general_description_from_customer"=>"A cake in the shape of the space shuttle"},
    @cake = cart.cakes.new(params[:cake])
    # shopping_cart_id gets set by the cart.cakes.new line.
    #@cake.production_quotum_id - will be set by a before_validation callback
    #@cake.weekday              - will be set by a before_validation callback
    cake_okay = @cake.valid? # should be FALSE as production_quotum hasn't been completd.


    # Next, the difficult part; stepping through the params[:product] stuff for every possible product
    # ================================================================================================
    # First thing is to pick up the counter we created in the ERB execution of the HTML FORM
    product_counter = params[:product_counter].to_i # e.g., 13
    
    # Next, I will step through the params[:product] looking for products from (say) 0..13.
    product_looper = 0
    while product_looper <= product_counter do
      if params[:product] and params[:product][(product_looper.to_s)]
        the_param = params[:product][(product_looper.to_s)] # so I don't have to keep doing that conversion
        item = @cake.shopping_cart_items.new
        puts "======" + the_param.inspect
        if the_param and the_param["id"] and the_param["id"].to_i > 0
          p = Product.find(the_param["id"].to_i)
          puts "=======          product(#{the_param["id"].to_s}) " + p.name
        end
      end # of "if params[:product] and params[:product][(product_looper.to_s).to_sym]"
      product_looper += 1
    end
    
    
    # Before we finish, test that everything went ok, and if it is, then go ahead and save everything.
    # ================================================================================================
    # if cake_okay and ...
    # @cake.save
    # 
    
    
    # Finally, redirect the user to some page
    # =======================================
    #
    
    
    # TEMPORARY: conclusion
    render :text => "@cake valid?: #{cake_okay.to_s}<br/>@cake errors: #{@cake.errors.inspect}<br/>Params: #{params[:cake]}<br/>#{"=" * 50}<br/>" +
    "Product Counter: #{product_counter.to_s}"
    
  end

  def view_cart
    @cart = current_cart
  end

  private
  
  def get_variables
    @special_occasions = SpecialOccasion.all(order: "running_order, name", conditions: ["visible_to_customers = ?", true])
  end

end
