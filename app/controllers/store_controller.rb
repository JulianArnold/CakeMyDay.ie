# StaticPagesController.rb
# 
# Class was originally generated by rails 3.2.8 
# Modified by Dan Laffan (12111619) starting 23rd November 2012.
#
# Note 1: Search attribute based on code demonstrated by Wesley Gorman
#         in NCI lecture, and subsequently modified by Dan Laffan.
#
# Copyright Â© 2012, Julian Arnold and Daniel M. Laffan.  All rights reserved.
# Rights in third party code acknowledged.

class StoreController < ApplicationController

  before_filter :get_variables, :except => 'search'

  def index
    
    if @special_occasions
      @special_occasion = SpecialOccasion.first(conditions: ["name = ? and visible_to_customers = ?", params[:show], true])
    end
    
    if @special_occasion
      @finished_products = @special_occasion.finished_products.all(order: "running_order, created_at DESC")
    else # params[:show] == "latest" or !params[:show] or params[:show] not known
      @finished_products = FinishedProduct.all(order: "running_order, created_at DESC")
      @finished_product = nil
    end
  end

  def show
    @finished_product = FinishedProduct.find_by_product_name(params[:product_name].gsub("_"," "))
    if @finished_product
      # go to the usual show.html.erb
      @special_occasion = @finished_product.special_occasion
    else
      redirect_to root_url, :notice => "Sorry, we couldn't find that product."
    end
  end

  def search
    @finished_products = FinishedProduct.search(params[:search_query])
    @products = Product.search(params[:search_query])
    render :search_results
  end

  def design_my_cake # Gives users the HTML form to customise a new cake
    # get or create the current shopping cart
    @current_cart = current_cart
    if !@current_cart # If there is no cart in existence already...
      # create a new cart
      @current_cart = ShoppingCart.new
      if current_user and current_user.customer
        @current_cart.customer_id = current_user.customer.id
      end
      @current_cart.session_id = session[:session_id]
      @current_cart.shopping_cart_status_id = ShoppingCartStatus.first(:conditions => ["active_cart = ?", true]).id
      @current_cart.pay_pal_status_id = 0
      @current_cart.save
    end
    
    # builds an empty @cake
    @cake = @current_cart.cakes.new
    @product_categories = ProductCategory.all(order: "running_order")
  end

  def add_this_to_the_cart
    cart = current_cart # By the time Ruby gets here, we have a cart.
    
    item = cart.cakes.new
    # now, populate the item with data
    # item.shopping_cart_id gets set by the cart.cakes.new line.
    # :based_on_finished_product_id, :cake_required_at, :confectioners_notes, :general_description_from_customer, :name_to_appear_on_cake, :production_quotum_id, :special_occasion, :weekday



  end

  def view_cart
    @cart = current_cart
  end

  private
  
  def get_variables
    @special_occasions = SpecialOccasion.all(order: "running_order, name", conditions: ["visible_to_customers = ?", true])
  end

end
